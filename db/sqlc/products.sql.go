// Code generated by sqlc. DO NOT EDIT.
// source: products.sql

package db

import (
	"context"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
  name, price, category_id, merchant_id, image, stock
) VALUES(
  $1, $2, $3, $4, $5, $6
) 
RETURNING id, name, price, category_id, merchant_id, image, stock, created_at, updated_at
`

type CreateProductParams struct {
	Name       string `json:"name"`
	Price      int32  `json:"price"`
	CategoryID int32  `json:"category_id"`
	MerchantID int32  `json:"merchant_id"`
	Image      string `json:"image"`
	Stock      int32  `json:"stock"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Name,
		arg.Price,
		arg.CategoryID,
		arg.MerchantID,
		arg.Image,
		arg.Stock,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.CategoryID,
		&i.MerchantID,
		&i.Image,
		&i.Stock,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE from products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getAllProducts = `-- name: GetAllProducts :many
SELECT id, name, price, category_id, merchant_id, image, stock, created_at, updated_at from products
`

func (q *Queries) GetAllProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getAllProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.CategoryID,
			&i.MerchantID,
			&i.Image,
			&i.Stock,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneProductById = `-- name: GetOneProductById :one
SELECT id, name, price, category_id, merchant_id, image, stock, created_at, updated_at from products
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOneProductById(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getOneProductById, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.CategoryID,
		&i.MerchantID,
		&i.Image,
		&i.Stock,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET name = $2, price = $3, image = $4
WHERE id = $1
RETURNING id, name, price, category_id, merchant_id, image, stock, created_at, updated_at
`

type UpdateProductParams struct {
	ID    int64  `json:"id"`
	Name  string `json:"name"`
	Price int32  `json:"price"`
	Image string `json:"image"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.Price,
		arg.Image,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.CategoryID,
		&i.MerchantID,
		&i.Image,
		&i.Stock,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProductStock = `-- name: UpdateProductStock :one
UPDATE products
SET stock = $2
WHERE id = $1
RETURNING id, name, price, category_id, merchant_id, image, stock, created_at, updated_at
`

type UpdateProductStockParams struct {
	ID    int64 `json:"id"`
	Stock int32 `json:"stock"`
}

func (q *Queries) UpdateProductStock(ctx context.Context, arg UpdateProductStockParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProductStock, arg.ID, arg.Stock)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.CategoryID,
		&i.MerchantID,
		&i.Image,
		&i.Stock,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
