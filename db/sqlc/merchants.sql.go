// Code generated by sqlc. DO NOT EDIT.
// source: merchants.sql

package db

import (
	"context"
	"time"
)

const createMerchant = `-- name: CreateMerchant :one
INSERT INTO merchants (
  name, lat, long, logo
) VALUES(
  $1, $2, $3, $4
) 
RETURNING id, name, lat, long, logo, created_at, updated_at
`

type CreateMerchantParams struct {
	Name string `json:"name"`
	Lat  string `json:"lat"`
	Long string `json:"long"`
	Logo string `json:"logo"`
}

func (q *Queries) CreateMerchant(ctx context.Context, arg CreateMerchantParams) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, createMerchant,
		arg.Name,
		arg.Lat,
		arg.Long,
		arg.Logo,
	)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Lat,
		&i.Long,
		&i.Logo,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMerchant = `-- name: DeleteMerchant :exec
DELETE from merchants
WHERE id = $1
`

func (q *Queries) DeleteMerchant(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMerchant, id)
	return err
}

const getAllMerchants = `-- name: GetAllMerchants :many
SELECT id, name, lat, long, logo, created_at, updated_at from merchants ORDER BY id ASC
`

func (q *Queries) GetAllMerchants(ctx context.Context) ([]Merchant, error) {
	rows, err := q.db.QueryContext(ctx, getAllMerchants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Merchant{}
	for rows.Next() {
		var i Merchant
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Lat,
			&i.Long,
			&i.Logo,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNearestMerchants = `-- name: GetNearestMerchants :many
select merchants.id, merchants.name, merchants.lat, merchants.long, merchants.logo, merchants.created_at, merchants.updated_at, distance, merchants.id, merchants.name, merchants.lat, merchants.long, merchants.logo, merchants.created_at, merchants.updated_at from (
SELECT  id, name, lat, long, logo, created_at, updated_at,( 3959 * acos( cos( radians($1) ) * cos( radians( lat ) ) * cos( radians( long ) - radians($2) ) + sin( radians($1) ) * sin( radians( lat ) ) ) ) AS distance 
FROM merchants
) merchants
where distance < 5
ORDER BY distance
LIMIT 20
`

type GetNearestMerchantsParams struct {
	Radians   float64 `json:"radians"`
	Radians_2 float64 `json:"radians_2"`
}

type GetNearestMerchantsRow struct {
	ID          int64     `json:"id"`
	Name        string    `json:"name"`
	Lat         string    `json:"lat"`
	Long        string    `json:"long"`
	Logo        string    `json:"logo"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
	Distance    int32     `json:"distance"`
	ID_2        int64     `json:"id_2"`
	Name_2      string    `json:"name_2"`
	Lat_2       string    `json:"lat_2"`
	Long_2      string    `json:"long_2"`
	Logo_2      string    `json:"logo_2"`
	CreatedAt_2 time.Time `json:"created_at_2"`
	UpdatedAt_2 time.Time `json:"updated_at_2"`
}

func (q *Queries) GetNearestMerchants(ctx context.Context, arg GetNearestMerchantsParams) ([]GetNearestMerchantsRow, error) {
	rows, err := q.db.QueryContext(ctx, getNearestMerchants, arg.Radians, arg.Radians_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetNearestMerchantsRow{}
	for rows.Next() {
		var i GetNearestMerchantsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Lat,
			&i.Long,
			&i.Logo,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Distance,
			&i.ID_2,
			&i.Name_2,
			&i.Lat_2,
			&i.Long_2,
			&i.Logo_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneMerchantById = `-- name: GetOneMerchantById :one
SELECT id, name, lat, long, logo, created_at, updated_at from merchants 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOneMerchantById(ctx context.Context, id int64) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, getOneMerchantById, id)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Lat,
		&i.Long,
		&i.Logo,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const searchCertainMerchants = `-- name: SearchCertainMerchants :many
SELECT id, name, lat, long, logo, created_at, updated_at from merchants WHERE name ILIKE $1 ORDER BY id ASC
`

func (q *Queries) SearchCertainMerchants(ctx context.Context, name string) ([]Merchant, error) {
	rows, err := q.db.QueryContext(ctx, searchCertainMerchants, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Merchant{}
	for rows.Next() {
		var i Merchant
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Lat,
			&i.Long,
			&i.Logo,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMerchant = `-- name: UpdateMerchant :one
UPDATE merchants
SET name = $2, long = $3, lat = $4
WHERE id = $1
RETURNING id, name, lat, long, logo, created_at, updated_at
`

type UpdateMerchantParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
	Long string `json:"long"`
	Lat  string `json:"lat"`
}

func (q *Queries) UpdateMerchant(ctx context.Context, arg UpdateMerchantParams) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, updateMerchant,
		arg.ID,
		arg.Name,
		arg.Long,
		arg.Lat,
	)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Lat,
		&i.Long,
		&i.Logo,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateMerchantLogo = `-- name: UpdateMerchantLogo :one
UPDATE merchants
SET logo = $2
WHERE id = $1
RETURNING id, name, lat, long, logo, created_at, updated_at
`

type UpdateMerchantLogoParams struct {
	ID   int64  `json:"id"`
	Logo string `json:"logo"`
}

func (q *Queries) UpdateMerchantLogo(ctx context.Context, arg UpdateMerchantLogoParams) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, updateMerchantLogo, arg.ID, arg.Logo)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Lat,
		&i.Long,
		&i.Logo,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
