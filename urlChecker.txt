package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"strings"
	"sync"
	"time"
)

func CheckAndSaveBody(url string, wg *sync.WaitGroup) {
	resp, err := http.Get(url)
	if err != nil {
		fmt.Println(err)
		fmt.Println(url, "is down")
		return
	}

	defer resp.Body.Close()

	bodyBytes, err := ioutil.ReadAll(resp.Body)

	_ = bodyBytes

	if err != nil {
		fmt.Println("error occured", err)
	}

	splitUrl := strings.Split(url, "//")[1]

	file := "coba/" + splitUrl + ".html"

	fmt.Printf("Writing response body to %s\n", file)

	if splitUrl == "golang.org" {
		fmt.Println("Sleeping Golang Org")
		time.Sleep(time.Second * 10)
	}

	if err = ioutil.WriteFile(file, bodyBytes, 0664); err != nil {
		log.Fatalln(err)
	}

	fmt.Println("Done Writing File:", splitUrl)

	wg.Done()
}







type Person struct {
	Name string `required:"true" json:"name"`
	Age  int    `required:"true"`
}

func CatchErr() {
	if r := recover(); r != nil {
		fmt.Println("error brow")
	}
}

func isValid(data interface{}) error {
	r := reflect.TypeOf(data)
	v := reflect.ValueOf(data)
	for i := 0; i < r.NumField(); i++ {
		t := r.Field(i)
		if t.Tag.Get("required") == "true" {
			if v.Field(i).String() == "" {
				tName := t.Tag.Get("json")
				return fmt.Errorf("field %v is required", tName)
			}
		}
	}

	return nil
}

func main() {
	// urls := []string{"https://golang.org", "https://www.google.com"}

	// var wg sync.WaitGroup

	// wg.Add(len(urls))

	// for _, url := range urls {
	// 	go CheckAndSaveBody(url, &wg)
	// 	fmt.Println(strings.Repeat("#", 20))
	// }

	// fmt.Println("No. of GoRoutines:", runtime.NumGoroutine())

	// wg.Wait()

	const gr = 10

	var wg sync.WaitGroup

	var n int = 0

	var m sync.Mutex

	for j := 0; j < 1; j++ {
		wg.Add(gr * 2)
		func() {
			for i := 0; i < gr; i++ {
				go func() {
					time.Sleep(time.Second / 10)
					m.Lock()
					n++
					m.Unlock()
					wg.Done()
					fmt.Println("Increment:", n)
				}()
				go func() {
					time.Sleep(time.Second / 10)
					m.Lock()
					n--
					m.Unlock()
					wg.Done()
					fmt.Println("Decrement:", n)
				}()
			}
		}()
		wg.Wait()
		fmt.Printf("{%d},Result: %d\n", j, n)
		n = 0
	}

}
